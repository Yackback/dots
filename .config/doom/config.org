#+TITLE: Doom Emacs Literate Config
#+AUTHOR: Kelvin Porter
#+EMAIL: kporter@protonmail.com
#+PROPERTY: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link
#+LANGUAGE: en

* Config
** Personal Information
Set my name and email address for environment vars and stuff.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Kelvin Porter"
      user-mail-address "kporter@protonmail.com")
#+END_SRC
** Startup Time
#+BEGIN_SRC emacs-lisp
(use-package! esup
  :commands (esup))
#+END_SRC
** Package Loading/Unloading
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments link
:END:
I don't like these ones.
#+BEGIN_SRC emacs-lisp
(package! solaire-mode :disable t)
(package! anaconda-mode :disable t)
#+END_SRC
I like these ones.
#+BEGIN_SRC emacs-lisp
(package! esup)
#+END_SRC
More org properties.
#+BEGIN_SRC emacs-lisp
(package! org-agenda-property
  :recipe (:host github :repo "Malabarba/org-agenda-property"))
#+END_SRC
A cool agenda.
#+BEGIN_SRC emacs-lisp
(package! org-super-agenda
  :recipe (:host github :repo "alphapapa/org-super-agenda"))
#+END_SRC
JSX major mode for Javascript work.
#+BEGIN_SRC emacs-lisp
(package! rjsx-mode
  :recipe (:host github :repo "felipeochoa/rjsx-mode"))
#+END_SRC
Sometimes I show off.
#+BEGIN_SRC emacs-lisp
(package! elcord :pin "94b0afb9ba")
#+END_SRC
* Completion
** Ivy
I use Ivy, but like to display it at the top of the screen as a posframe. Let's
set that after ivy-posframe is loaded.
#+BEGIN_SRC emacs-lisp
(after! ivy-posframe
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center))))
#+END_SRC
* UI
** Theme
Doom's theme is set by the doom-theme variable. I like vibrant right now.
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-vibrant)
#+END_SRC
** Font
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 14))
#+END_SRC
** Deft
Deft allows you to quickly search/filter/edit your notes. I set my deft
directory to be my org-roam directory.
#+BEGIN_SRC emacs-lisp
(setq deft-directory "~/doc/org/roam")
#+END_SRC
I also disable evil while inside deft in favor of deft's hotkeys.
#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'deft-mode 'emacs)
#+END_SRC
* Editor
** Basic Settings
#+BEGIN_SRC  emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC
** Evil
*** Evil Snipe
#+BEGIN_SRC emacs-lisp
(setq evil-snipe-scope 'buffer
      evil-snipe-repeat-scope 'whole-buffer)
#+END_SRC
* Term
** Vterm
Let's set vterm to be in emacs mode, not evil mode.
#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'vterm-mode 'emacs)
#+END_SRC
* Lang
** Org
*** Org Directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/doc/org/" )
#+END_SRC
*** Org Capture Templates
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(
        ("t" "Tasks")
        ("tt" "Todo" entry (file+headline "~/doc/org/todo.org" "Tasks")
         "* TODO %^{Tags}g %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"today\"))\n %^{Effort}p \n")
        ("ts" "School Todo" entry (file+headline "~/doc/org/todo.org" "Tasks")
         "* TODO %? :School:")
        ("tp" "Project Todo" entry (file+headline "~/doc/org/todo.org" "Projects")
         "* TODO %? :Project:\n %^{Effort}p \n")
        ("e" "Events")
        ("ee" "Event" entry (file+headline "~/doc/org/schedule.org" "Events")
         "* %?")
        ("ec" "Club Event" entry (file+headline "~/doc/org/schedule.org" "Clubs")
         "* %?")))
#+END_SRC
*** Org Todo
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO(t)" "HOLD(h)" "WIP(w)" "PROJECT(p)" "|" "DONE(d)")))
#+END_SRC
*** Org Tags
#+BEGIN_SRC emacs-lisp
(setq org-tag-alist '((:startgroup nil)
                      ("Trivial" . ?t) ("Unimportant" . ?u) ("Important" . ?i)
                      (:endgroup nil)
                      (:startgroup nil)
                      ("School" . ?s)
                      ("Issue" . ?i)
                      ("Project" . ?p)
                      ("Dotfiles" . ?d)
                      (:endgroup nil)))
#+END_SRC
*** Org Agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list org-directory)
      org-agenda-time-grid '((daily today require-timed) nil nil "---------------")
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-compact-blocks t
      org-agenda-start-with-log-mode t
      org-agenda-log-mode-items '(closed clock state)
      org-agenda-prefix-format "%i %-12t %-3e "
      org-agenda-use-time-grid nil
      org-columns-default-format-for-agenda "%25ITEM %TODO %3PRIORITY %TAGS %LOCATION"
      org-agenda-start-day "0d"
      org-agenda-span 1
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-diary t
      org-agenda-block-separator nil
      org-agenda-overriding-header ""
      org-agenda-compact-blocks t)
#+END_SRC
*** Org Agenda Property
Org Agenda Property creates a few new properties so I can include classes on my
agenda. It is likely I may delete this section soon though, as I'm not sure how
relevant it is when I already have this information memorized.
#+BEGIN_SRC emacs-lisp
(use-package! org-agenda-property
  :config
  (setq org-agenda-property-list '("LOCATION" "TEACHER")
        org-agenda-property-position 'where-it-fits
        org-agenda-property-separator "|"))
#+END_SRC
*** Org Super Agenda
Org Super Agenda redefines the agenda to be a lot better. I have custom groups
for where things go and the order they show up in, mostly based on deadlines and
whether or not they are related to my education.
#+BEGIN_SRC emacs-lisp
(use-package! org-super-agenda
  :after org
  :config
  (setq org-super-agenda-groups
        '((:name "Next to do"
                 :todo "NEXT"
                 :order 1)
          (:name "Important"
                 :tag "Important"
                 :order 6)
          (:name "Due Today"
                 :deadline today
                 :order 2)
          (:name "Due Soon"
                 :deadline future
                 :order 8)
          (:name "Overdue"
                 :deadline past
                 :order 7)
          (:name "Scheduled"
                 :category "Events"
                 :order 9)
          (:name "School"
                 :tag "School"
                 :order 10)
          (:name "Issues"
                 :tag "Issue"
                 :order 12)
          (:name "Projects"
                 :tag "Project"
                 :order 14)
          (:name "Dotfiles"
                 :tag "Dotfiles"
                 :order 13)
          (:name "Waiting"
                 :todo "WAITING"
                 :order 20)
          (:name "Trivial"
                 :priority<= "C"
                 :tag ("Trivial" "Unimportant")
                 :order 90)
          (:discard (:tag ("Chore" "Routine" "Daily"))))))
#+END_SRC
*** Org Roam
I use Org Roam as a way to organize my notes. Roam is similar to a mind map of
sorts, with different files being different topics. I auto activate it on
entering org mode, which decreases my startup time but allows capture commands
to work without any additional things running.
#+BEGIN_SRC emacs-lisp
(use-package! org-roam
    :after org
    :hook (org-mode . org-roam-mode)
    :commands (org-roam-insert org-roam-find-file org-roam)
    :custom
    (org-roam-directory "~/doc/org/roam/")
    (org-roam-capture-templates '(("d" "default" plain (function org-roam--capture-get-point)
                                   "%?"
                                   :file-name "%<%Y%m%d%H%M%S>-${slug}"
                                   :head "#+TITLE: ${title}\n"
                                   :unnarrowed t))))
(use-package! org-roam-protocol)
#+END_SRC
*** Org Gcal
Add google calendar events to an org file. Loads config_private.el which
contains the api key and calendars to load.
#+BEGIN_SRC emacs-lisp
(after! org-gcal
  (add-to-list 'load-path "~/.config/doom")
  (require 'config_private))
#+END_SRC
An example of what might be in config_private, where the Google Calendar ID is
probably an email address.
#+BEGIN_EXAMPLE emacs-lisp
(setq org-gcal-client-id "googleclientid"
      org-gcal-client-secret "googleclientsecret"
      org-gcal-file-alist '(("google_calendar_id" .  "org_file")))
(provide 'config_private)
#+END_EXAMPLE
*** Org Screenshot
Sometimes I want to take screenshots and put them into org files.
This is a script modified from https://stackoverflow.com/questions/17435995/
#+BEGIN_SRC emacs-lisp
(defun org-screenshot-area ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat (buffer-file-name)
                  "_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (call-process "escrotum" nil nil nil "-s" filename)
  (insert (concat "[[" filename "]]"))
  (org-display-inline-images))
#+END_SRC
** Python
*** Conda
Set the home directory for Conda.
#+BEGIN_SRC emacs-lisp
(setq conda-env-home-directory "/home/yack/.conda/")
#+END_SRC
** Web
Let's use rjsx mode for JSX files.
#+BEGIN_SRC emacs-lisp
#+END_SRC
Javascript -> JSX
#+BEGIN_SRC emacs-lisp
(add-hook 'web-mode-hook
          (lambda ()
            short circuit js mode and just do everything in jsx-mode
            (if (equal web-mode-content-type "javascript")
                (web-mode-set-content-type "jsx")
              (message "now set to: %s" web-mode-content-type))))
#+END_SRC
* Tools
** elcord
Show off.
(Discord Rich Presence for Emacs)
#+BEGIN_SRC emacs-lisp
(use-package! elcord
  :defer t)
#+END_SRC
